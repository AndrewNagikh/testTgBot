/* eslint-disable camelcase */
/* eslint-disable import/no-extraneous-dependencies */
require('dotenv').config();

const express = require('express');
const morgan = require('morgan');
const { Telegraf } = require('telegraf');
const { User } = require('../db/models');
const {
  mainMenu, stopMenu, sendMenu, broadcast,
} = require('../lib/controllers');

const { sequelize } = require('../db/models');

const app = express();

app.use(morgan('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

const { PORT, TELEGRAM_TOKEN, WEATHER_API_KEY } = process.env;
const bot = new Telegraf(TELEGRAM_TOKEN);

bot.start(async (ctx) => {
  const { first_name } = ctx.message.from;
  try {
    await User.create({ username: first_name, tg_id: ctx.chat.id });
    ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–Ω–æ–ø–∫—É', mainMenu());
  } catch (error) {
    ctx.reply('–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ—Ç–∞', mainMenu());
  }
});

bot.hears('–ü—Ä–æ—â–∞–π', async (ctx) => {
  const { id } = ctx.message.from;
  ctx.reply('–ü–æ–∫–∞ –ü–æ–∫–∞', stopMenu());
  await User.destroy({ where: { tg_id: id } });
});

bot.hears('‚òÄÔ∏è–ü–æ–≥–æ–¥–∞', async (ctx) => {
  const canadaWeather = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=Canada&appid=${WEATHER_API_KEY}`);
  const canadaWeatherRes = await canadaWeather.json();
  const weather = {};
  if (canadaWeather.status === 200) {
    weather.country = canadaWeatherRes.name;
    weather.sky = canadaWeatherRes.weather[0].main;
    weather.temp = (canadaWeatherRes.main.temp - 273.15).toFixed(2);
    weather.tempFeels = (canadaWeatherRes.main.feels_like - 273.15).toFixed(2);
    ctx.reply(`Weather in ${weather.country}\n${weather.sky} sky\nTemperature ${weather.temp}¬∞C, feels like ${weather.tempFeels}¬∞C`);
  }
});

bot.hears('üìñ –•–æ—á—É –ø–æ—á–∏—Ç–∞—Ç—å', async (ctx) => {
  ctx.sendPhoto('https://pythonist.ru/wp-content/uploads/2020/03/photo_2021-02-03_10-47-04-350x2000-1.jpg', { caption: '–ò–¥–µ–∞–ª—å–Ω—ã–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ —Ä–∞–±–æ—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞ Python. –í—ã –Ω–∞–π–¥–µ—Ç–µ –º–æ—Ä–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–∞—Ö –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞—Ö –≤ Python, –∏–º–µ–Ω–∞—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤, –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö, –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö –∏ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö' });
  ctx.replyWithDocument({
    url: 'https://drive.google.com/file/d/1Xs_YjOLgigsuKl17mOnR_488MdEKloCD/view',
    filename: 'file.zip',
  });
});

bot.hears('üí¨–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', async (ctx) => {
  ctx.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –í—ã —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?', sendMenu());
});

bot.action(['yes', 'no'], async (ctx) => {
  if (ctx.callbackQuery.data === 'yes') {
    ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
    const users = await User.findAll({ raw: true });
    broadcast(bot, users);
  }
  if (ctx.callbackQuery.data === 'no') {
    ctx.deleteMessage();
  }
});

bot.launch();

app.listen(PORT, async () => {
  try {
    await sequelize.authenticate();
    console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
  } catch (err) {
    console.log(err, 'Error!');
  }
  console.log(`–°–µ—Ä–≤–µ—Ä –ø–æ–¥–Ω—è—Ç –Ω–∞ ${PORT} –ø–æ—Ä—Ç—É!`);
});
